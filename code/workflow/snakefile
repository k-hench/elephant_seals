"""
snakemake -n -R all
snakemake -c 1 -R all_examples
"""
import os
from copy import deepcopy
import numpy as np
import pandas as pd

configfile: "workflow/config.yml"

code_dir = os.getcwd()
base_dir = code_dir + "/.."

rule all:
    params:
      wd = code_dir,
      base_dir = base_dir
    message:
      '''

      Ahoi there,
      we are using `{params.wd}` as working directory,
      while `{params.base_dir}` is the base directory
      of this project.

      There are several sub-tasks witihin this pipeline,
      that can be invoked as follows:

      - run `snakemake <options> -R cleanup_all` to remove intermediate files that can not be flagged with temp() due to modularized pipeline setup
      - run `snakemake <options> -R ncbi_download` for the download of the refernce geonmes
      - run `snakemake <options> -R all_repeat` for the optional repeat masking of the refernce geonmes
      - run `snakemake <options> -R align_all` for the alignment of the elephan seal genomes to the california sea lion genome
      - run `snakemake <options> -R cactus_prep` to set up the jobs for the cactus alignment of the carnivora genomes
      - run `snakemake <options> -R cactus_stepwise` to run the cactus alignment in a step-wise fashion
      
      Overall project parameters can be edited within `config.yml`.
      '''

rule setup_proj_dirs:
    # some rules depend on the existance of the folders
    # created here
    output: touch( '../results/checkpoints/prj_structure_ready.check' )
    shell:
      """
      mkdir -p \
        ../results/qc/adapter \
        ../results/qc/metrics \
        ../results/qc/snp_metrics/ \
        ../results/qc/fastqc/ \
        ../results/img/qc \
        ../results/img/control 
      """

c_gatk = config[ 'sif_gatk' ]
c_qc = config[ 'sif_qc' ]
c_popgen = config[ 'sif_popgen' ]
c_sim = config[ 'sif_sim' ]
c_ml = config[ 'sif_ml' ]
c_cactus = config[ 'cactus_sif' ]
c_jvar = config[ 'sif_jvar' ]

P_NAME = config[ 'alignment_name' ]
SPEC_REF = config[ 'refName' ]
SPEC_QUERY = config[ 'species' ]
SPEC_ALL = deepcopy( SPEC_QUERY )
SPEC_ALL.insert( 0, SPEC_REF )
CACTUS_CORES=config[ 'cactus_cores' ]
GENOME_PARTITIONS = [ str(x + 1).zfill(2) for x in np.arange(20)]

include: "./rules/cleanup.smk"
include: "./rules/initial_dl.smk"
include: "./rules/repeat_mask.smk"
include: "./rules/align.smk"
include: "./rules/cactus_prep.smk"
include: "./rules/genotype_prep.smk"
include: "./rules/genotyping.smk"
include: "./rules/genotyping_qc.smk"
include: "./rules/genotype_conversions.smk"
include: "./rules/roh_calling.smk"
include: "./rules/demographic_history.smk"
include: "./rules/mutation_load_functional.smk"
include: "./rules/ancestral_alleles.smk"
include: "./rules/diversity.smk"
include: "./rules/sim_ind_load.smk"
include: "./rules/figures_prep.smk"
include: "./rules/figures.smk"

# conditional inclusion of repeat masking part
if config[ 'need_masking' ] != None:
  MASK_GENOMES = config[ 'need_masking' ]
  include: "./rules/repeat_mask.smk"

# conditional kick-off of the actual cactus alignment
if os.path.exists("../results/cactus/job_inventory.tsv"):
  include: "./rules/cactus_stepwise.smk"
